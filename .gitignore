import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.*;

class utils {
    public static void delay(int timeInMS) {
        try {
                Thread.sleep(timeInMS);
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
        }
    }
}

class Game extends JPanel {
int score = 0;
int lives;
boolean GameOver = false;

    //Player Variables
    final int  P_y4 = 520 , P_y3 = P_y4-10 , P_y2 = P_y3-10 , P_y1 = P_y2-5;
    int P_x4 , P_x3 , P_x2 , P_x1;

    //Bullet Variables
    int bulCnt=23;
    int B_x[] = new int[this.bulCnt];
    int B_y[] = new int[this.bulCnt];
    boolean isShooting[] = new boolean[this.bulCnt];

    //Enemies Variables
    Random genRan = new Random();
    int enemCnt = 6;
    int E_x[] = new int[this.enemCnt];
    int E_y[] = new int[this.enemCnt];
    boolean isAttacking[] = new boolean[this.enemCnt];
    boolean defeated;
    int cnt;


    public void  Game(int X_Pos){
    this.lives = 3;

     this.P_x1 = X_Pos+25;
     this.P_x2 = X_Pos+20;
     this.P_x3 = X_Pos+10;
     this.P_x4 = X_Pos;
     this.defeated = false;

     for (int i=0 ; i<this.bulCnt ; i++)
         this.isShooting[i] = false;

     for (int i=0 ; i<this.enemCnt ; i++)
         this.isAttacking[i] = false;
     this.cnt = 0;
    }

    public void Player (int X_Pos){
        this.P_x1 = X_Pos+25;
        this.P_x2 = X_Pos+20;
        this.P_x3 = X_Pos+10;
        this.P_x4 = X_Pos;
    }

    public void Bullet() {
        for (int i=this.bulCnt-1 ; i>=0 ; i--) {
            if (!this.isShooting[i]) {
                this.B_x[i] = this.P_x1;
                this.B_y[i] = 495;
                this.isShooting[i] = true;
            break;
            }
        }
    }

    public void Enemy() {
        int Pos = genRan.nextInt(5) * 90;
        Pos+=90;
        for(int i=0 ; i<this.enemCnt ; i++){
            if (!this.isAttacking[i]){
                this.E_x[i] = Pos;
                this.E_y[i] = 65;
                this.isAttacking[i] = true;
            break;
            }
        }
    }

    public void createPlayerShape(Graphics g){
        g.setColor(Color.red);          // RED
            g.fillRect(this.P_x1, this.P_y1, 10, 10);
        g.setColor(Color.darkGray);     //DarkGray
            g.fillRect(this.P_x2, this.P_y2, 20, 10);
            g.fillRect(this.P_x3, this.P_y3, 40, 10);
            g.fillRect(this.P_x4, this.P_y4, 60, 10);
    }

    public void createBullestShapes(Graphics g){
        for (int i=0 ; i<this.bulCnt ; i++) {
            if (this.isShooting[i]) {
                this.B_y[i] -= 2;
                if (this.B_y[i] <= 60)
                    this.isShooting[i] = false;
                g.setColor(Color.red);
                g.fillRect(this.B_x[i], this.B_y[i], 10, 8);
            }
        }
    }

    public void createEnemiesShapes(Graphics g){
        this.cnt++;
        if (this.cnt == 5)
            this.cnt = 0;
        for (int i = 0; i < this.enemCnt; i++) {
            if (this.isAttacking[i]) {
                if (this.cnt == 0) {
                    this.E_y[i]+=2;
                }
                if (this.E_y[i] >= 430) {
                    this.isAttacking[i] = false;
                    this.defeated = true;
                }
                g.setColor(Color.red);
                g.fillRect(this.E_x[i] + 25, this.E_y[i] - 12, 10, 6);
                g.fillRect(this.E_x[i] + 12, this.E_y[i] - 6, 36, 6);
                g.fillRect(this.E_x[i], this.E_y[i], 60, 6);
                g.fillRect(this.E_x[i] + 12, this.E_y[i] + 6, 36, 6);
                g.fillRect(this.E_x[i] + 25, this.E_y[i] + 12, 10, 6);
            }
        }
    }

    public void ifShooted(){
        for(int i=0 ; i<this.bulCnt ; i++){
            for(int j=0 ; j<this.enemCnt ; j++){
                if (this.isShooting[i] && this.isAttacking[j]){
                    if ((this.E_x[j]-this.B_x[i] <= 20)
                            &&
                            (this.E_x[j]-this.B_x[i] >= -70)
                            &&
                            (this.E_y[j]-this.B_y[i] > 0)
                            &&
                            (this.E_y[j]-this.B_y[i]) <= 16){
                        this.isAttacking[j] = false;
                        this.isShooting[i] = false;
                        this.score++;
                    }
                }
            }
        }
    }
    public void ifEnemyInTheArea() {
        if (this.defeated){
            this.lives--;
            this.defeated = false;
        }
    }

    public void endTurn(){
        if (this.lives <= 0){
            utils.delay(10);
            this.GameOver = true;
        }
    }

    public void paintComponent(Graphics g){
        super.paintComponent(g);
    // Basic Settings
        // TODO: DarkMode & LightMode
        setBackground(Color.black);
        setSize(600 , 600);
    g.setColor(Color.red);          //RED
        g.drawLine(0 , 450 , 600 , 450);
    g.setColor(Color.white);
        g.drawLine(0 , 40 , 600 , 40);
    g.setFont(new Font("TimesRoman" , Font.PLAIN , 20));
    String Score = "Score: "+this.score;
        g.drawString(Score ,10 , 27);
    String Lives = "Lives: "+this.lives;
        g.drawString(Lives , 260 , 27);

    createPlayerShape(g);
    createBullestShapes(g);
    createEnemiesShapes(g);
    ifShooted();
    ifEnemyInTheArea();
    endTurn();
    }
}

class frame extends JFrame{
    int P_x = 262;
    int frameCnt = 0;
    utils MYtools = new utils();
    Game me;
    JLabel GameOver = new JLabel("Game Over!");
    Font f = new Font ("TimesRoman", Font.PLAIN , 100);
    JButton rePlay = new JButton("Play Again.");


    public frame() {

// basic settings
        setTitle("Space Fighter!");
        setSize(600, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);

       //Events

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {

                if (e.getKeyCode() == KeyEvent.VK_LEFT){
                    P_x-=25;
                    if (P_x < 0)
                        P_x=0;
                    me.Player(P_x);
                }
                 if (e.getKeyCode() == KeyEvent.VK_RIGHT){
                    P_x+=25;
                    if (P_x > 524)
                        P_x=524;
                    me.Player(P_x);
                }
                 if (e.getKeyCode() == KeyEvent.VK_SPACE){
                    me.Bullet();
                }
                    }
        });

        me = new Game();
        setLayout(new GridLayout(1, 1));
        me.GameOver = false;
        me.Game(262); // inetial posetion
        add(me);
        revalidate();
        frameCnt = 0;
        while (!me.GameOver) {
            if (frameCnt == 0)
                me.Enemy();
            frameCnt++;
            if (frameCnt == 250)
                frameCnt = 0;
            revalidate();
            MYtools.delay(3);
        }

    //TODO SetUp the starting interface
    //TODO add score and lives and highScore
    }
}

public class Main_class {
    public static void main(String[] args) {
        frame app = new frame();
        app.getContentPane().setBackground(Color.black);
        JLabel lbl = new JLabel("Game Over!");
        utils.delay(50);
        Font f = new Font("TimesRoman" , Font.PLAIN , 105);
        lbl.setFont(f);
        lbl.setForeground(Color.red);
        app.remove(app.me);
        app.setLayout(new BorderLayout());
        app.add(lbl , BorderLayout.CENTER);
        app.revalidate();
    }
}
